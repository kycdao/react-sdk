{"version":3,"file":"kycdao-react-sdk.cjs.development.js","sources":["../src/context/KycDaoContext.ts","../src/hooks/useKycDao.ts","../src/config/index.ts","../src/providers/KycDaoProvider.tsx"],"sourcesContent":["import { createContext } from 'react';\nimport { KycDao } from '@kycdao/kycdao-sdk';\n\ninterface KycDaoInterface {\n  kycDao: KycDao | null;\n}\n\nconst KycDaoContext = createContext<KycDaoInterface>({ kycDao: null });\n\nexport default KycDaoContext;\n","import { useContext } from 'react';\n\nimport KycDaoContext from '../context/KycDaoContext';\n\nconst useKycDao = () => {\n  const context = useContext(KycDaoContext);\n\n  if (context === undefined) {\n    throw new Error(`useKycDao must be used within a KycDaoProvider`);\n  }\n\n  const { kycDao } = context;\n\n  return kycDao;\n};\n\nexport default useKycDao;\n","// eslint-disable-next-line\nimport type { SdkConfiguration } from '@kycdao/kycdao-sdk';\n\nconst getConfig = async (networkId = 'testnet'): Promise<SdkConfiguration> => {\n  const { BlockchainNetworks, KycDaoEnvironments, VerificationTypes } = await import('@kycdao/kycdao-sdk');\n\n  const configMap = new Map([\n    [\n      'testnet',\n      {\n        baseUrl: 'https://staging.kycdao.xyz/api/frontend',\n        enabledBlockchainNetworks: [BlockchainNetworks.NearTestnet],\n        enabledVerificationTypes: [VerificationTypes.KYC],\n        environment: KycDaoEnvironments.test,\n      },\n    ],\n    [\n      'mainnet',\n      {\n        baseUrl: 'https://staging.kycdao.xyz/api/frontend',\n        enabledBlockchainNetworks: [BlockchainNetworks.NearMainnet],\n        enabledVerificationTypes: [VerificationTypes.KYC],\n        environment: KycDaoEnvironments.test,\n      },\n    ],\n  ]);\n\n  const config = configMap.get(networkId);\n\n  if (!config) {\n    throw new Error(`No config for networkId: ${networkId}`);\n  }\n\n  return config;\n};\n\nexport default getConfig;\n","import React, { useEffect, useMemo, useState } from 'react';\n// eslint-disable-next-line\nimport type { KycDao, SdkConfiguration } from '@kycdao/kycdao-sdk';\n\nimport getConfig from '../config';\nimport KycDaoContext from '../context/KycDaoContext';\n\nconst KycDaoProvider = ({ children, networkId = 'testnet', config }: { children: JSX.Element; networkId: string; config: SdkConfiguration | object }) => {\n  const [kycDao, setKycDao] = useState<KycDao | null>(null);\n\n  useEffect(() => {\n    const initKycDao = async () => {\n      const { KycDao } = await import('@kycdao/kycdao-sdk');\n      const defaultConfig = await getConfig(networkId);\n      const kycDaoInitialized = await KycDao.initialize({\n        ...defaultConfig,\n        ...config,\n      });\n      setKycDao(kycDaoInitialized.kycDao);\n    };\n\n    initKycDao();\n  }, [networkId, config]);\n\n  const contextValue = useMemo(() => ({ kycDao }), [kycDao]);\n\n  return <KycDaoContext.Provider value={contextValue}>{children}</KycDaoContext.Provider>;\n};\n\nexport default KycDaoProvider;\n"],"names":["KycDaoContext","createContext","kycDao","useKycDao","context","useContext","undefined","Error","getConfig","networkId","BlockchainNetworks","KycDaoEnvironments","VerificationTypes","configMap","Map","baseUrl","enabledBlockchainNetworks","NearTestnet","enabledVerificationTypes","KYC","environment","test","NearMainnet","config","get","KycDaoProvider","children","useState","setKycDao","useEffect","initKycDao","KycDao","defaultConfig","initialize","kycDaoInitialized","contextValue","useMemo","React","Provider","value"],"mappings":"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"}