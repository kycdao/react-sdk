{"version":3,"file":"kycdao-react-sdk.cjs.production.min.js","sources":["../src/context/KycDaoContext.ts","../src/config/index.ts","../src/providers/KycDaoProvider.tsx","../src/hooks/useKycDao.ts"],"sourcesContent":["import { createContext } from 'react';\nimport { KycDao } from '@kycdao/kycdao-sdk';\n\ninterface KycDaoInterface {\n  kycDao: KycDao | null;\n}\n\nconst KycDaoContext = createContext<KycDaoInterface>({ kycDao: null });\n\nexport default KycDaoContext;\n","// eslint-disable-next-line\nimport type { SdkConfiguration } from '@kycdao/kycdao-sdk';\n\nconst getConfig = async (networkId = 'testnet'): Promise<SdkConfiguration> => {\n  const { BlockchainNetworks, KycDaoEnvironments, VerificationTypes } = await import('@kycdao/kycdao-sdk');\n\n  const configMap = new Map([\n    [\n      'testnet',\n      {\n        baseUrl: 'https://staging.kycdao.xyz/api/frontend',\n        enabledBlockchainNetworks: [BlockchainNetworks.NearTestnet],\n        enabledVerificationTypes: [VerificationTypes.KYC],\n        environment: KycDaoEnvironments.test,\n      },\n    ],\n    [\n      'mainnet',\n      {\n        baseUrl: 'https://staging.kycdao.xyz/api/frontend',\n        enabledBlockchainNetworks: [BlockchainNetworks.NearMainnet],\n        enabledVerificationTypes: [VerificationTypes.KYC],\n        environment: KycDaoEnvironments.test,\n      },\n    ],\n  ]);\n\n  const config = configMap.get(networkId);\n\n  if (!config) {\n    throw new Error(`No config for networkId: ${networkId}`);\n  }\n\n  return config;\n};\n\nexport default getConfig;\n","import React, { useEffect, useMemo, useState } from 'react';\n// eslint-disable-next-line\nimport type { KycDao, SdkConfiguration } from '@kycdao/kycdao-sdk';\n\nimport getConfig from '../config';\nimport KycDaoContext from '../context/KycDaoContext';\n\nconst KycDaoProvider = ({ children, networkId = 'testnet', config }: { children: JSX.Element; networkId: string; config: SdkConfiguration | object }) => {\n  const [kycDao, setKycDao] = useState<KycDao | null>(null);\n\n  useEffect(() => {\n    const initKycDao = async () => {\n      const { KycDao } = await import('@kycdao/kycdao-sdk');\n      const defaultConfig = await getConfig(networkId);\n      const kycDaoInitialized = await KycDao.initialize({\n        ...defaultConfig,\n        ...config,\n      });\n      setKycDao(kycDaoInitialized.kycDao);\n    };\n\n    initKycDao();\n  }, [networkId, config]);\n\n  const contextValue = useMemo(() => ({ kycDao }), [kycDao]);\n\n  return <KycDaoContext.Provider value={contextValue}>{children}</KycDaoContext.Provider>;\n};\n\nexport default KycDaoProvider;\n","import { useContext } from 'react';\n\nimport KycDaoContext from '../context/KycDaoContext';\n\nconst useKycDao = () => {\n  const context = useContext(KycDaoContext);\n\n  if (context === undefined) {\n    throw new Error(`useKycDao must be used within a KycDaoProvider`);\n  }\n\n  const { kycDao } = context;\n\n  return kycDao;\n};\n\nexport default useKycDao;\n"],"names":["KycDaoContext","createContext","kycDao","getConfig","networkId","_context","BlockchainNetworks","_yield$import","KycDaoEnvironments","VerificationTypes","configMap","Map","baseUrl","enabledBlockchainNetworks","NearTestnet","enabledVerificationTypes","KYC","environment","test","NearMainnet","config","get","Error","children","useState","setKycDao","useEffect","KycDao","defaultConfig","initialize","initKycDao","contextValue","useMemo","React","Provider","value","context","useContext","undefined"],"mappings":"gYAOMA,EAAgBC,gBAA+B,CAAEC,OAAQ,+1NCJ/D,IAAMC,aAAS,kBAAG,WAAOC,GAAP,gBAAA,6BAAA,OAAA,sBAAA,OAAA,gBAAOA,IAAAA,EAAY,WAAnBC,SAC4D,qCAAO,2BADnE,OAAA,GACRC,GADQC,UACRD,mBAAoBE,IAAAA,mBAAoBC,IAAAA,kBAE1CC,EAAY,IAAIC,IAAI,CACxB,CACE,UACA,CACEC,QAAS,0CACTC,0BAA2B,CAACP,EAAmBQ,aAC/CC,yBAA0B,CAACN,EAAkBO,KAC7CC,YAAaT,EAAmBU,OAGpC,CACE,UACA,CACEN,QAAS,0CACTC,0BAA2B,CAACP,EAAmBa,aAC/CJ,yBAA0B,CAACN,EAAkBO,KAC7CC,YAAaT,EAAmBU,SAKhCE,EAASV,EAAUW,IAAIjB,IAxBbC,UAAA,MAAA,MA2BR,IAAIiB,kCAAkClB,GA3B9B,QAAA,yBA8BTgB,GA9BS,QAAA,UAAA,0BAAH,mBAAA,kFCIQ,gBAAGG,IAAAA,aAAUnB,UAAAA,aAAY,YAAWgB,IAAAA,SAC7BI,WAAwB,MAA7CtB,OAAQuB,OAEfC,aAAU,uBACQ,kBAAG,aAAA,QAAA,6BAAA,OAAA,sBAAA,OAAA,OAAArB,SACQ,qCAAO,2BADf,OAAA,OACTsB,SAAAA,OADStB,SAEWF,EAAUC,GAFrB,OAAA,OAEXwB,SAFWvB,SAGesB,EAAOE,gBAClCD,EACAR,IALY,OAOjBK,SAA4BvB,QAPX,QAAA,UAAA,0BAAH,kBAAA,kCAUhB4B,KACC,CAAC1B,EAAWgB,IAEf,IAAMW,EAAeC,WAAQ,WAAA,MAAO,CAAE9B,OAAAA,KAAW,CAACA,IAElD,OAAO+B,gBAACjC,EAAckC,UAASC,MAAOJ,GAAeR,sBCtBrC,WAChB,IAAMa,EAAUC,aAAWrC,GAE3B,QAAgBsC,IAAZF,EACF,MAAM,IAAId,wDAKZ,OAFmBc,EAAXlC"}